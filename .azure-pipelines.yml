trigger:
- master

resources:
  containers:
  - container: 2.2-bionic
    image: mcr.microsoft.com/dotnet/core/sdk:2.2-bionic
  - container: 3.0-disco
    image: mcr.microsoft.com/dotnet/core/sdk:3.0-disco
  - container: 3.0-buster
    image: mcr.microsoft.com/dotnet/core/sdk:3.0-buster
  - container: 3.1-focal
    image: mcr.microsoft.com/dotnet/core/sdk:3.1-focal
  - container: 5.0-focal
    image: mcr.microsoft.com/dotnet/sdk:5.0-focal
  - container: 5.0-buster
    image: mcr.microsoft.com/dotnet/sdk:5.0-buster-slim
  - container: 5.0-bullseye
    image: mcr.microsoft.com/dotnet/sdk:5.0-bullseye-slim
  - container: 5.0-nanoserver
    image: mcr.microsoft.com/dotnet/sdk:5.0-nanoserver-1809

stages:
- stage: Build
  jobs:
  - job: build_focal
    container: 5.0-focal
    pool:
      vmImage: ubuntu-20.04
    steps:
    - bash: |
        dotnet restore dotnet-packaging.sln
        dotnet pack dotnet-packaging.sln -c Release -o $(Build.ArtifactStagingDirectory)
        dotnet test Packaging.Targets.Tests/Packaging.Targets.Tests.csproj -l "trx;LogFileName=$(Build.ArtifactStagingDirectory)/Packaging.Targets.Tests.trx"

        cp demo/Directory.Build.props $(Build.ArtifactStagingDirectory)
        cp demo/version.txt $(Build.ArtifactStagingDirectory)
      displayName: Build
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: $(Build.ArtifactStagingDirectory)/*.trx
      condition: true
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: nuget

  - job: build_windows
    pool:
      vmImage: windows-2019
    container: 5.0-nanoserver
    # Make sure we can run scripts in PowerShell core:
    # https://github.com/microsoft/azure-pipelines-tasks/issues/11448
    variables:
      agent.preferPowerShellOnContainers: false
    steps:
    - pwsh: |
        dotnet restore dotnet-packaging.sln
        dotnet pack dotnet-packaging.sln -c Release -o $(Build.ArtifactStagingDirectory)
        dotnet test Packaging.Targets.Tests/Packaging.Targets.Tests.csproj -l "trx;LogFileName=$(Build.ArtifactStagingDirectory)/Packaging.Targets.Tests.trx"
      displayName: Build
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: $(Build.ArtifactStagingDirectory)/*.trx

- stage: Test
  jobs:
  - job: build_package
    strategy:
      maxParallel: 8
      matrix:
        3.1-focal-deb:
          container: 3.1-focal
          command: deb
        3.1-disco-rpm:
          container: 3.1-focal
          command: rpm
        3.1-focal-zip:
          container: 3.1-focal
          command: zip
        3.1-focal-tarball:
          container: 3.1-focal
          command: tarball

        5.0-focal-deb:
          container: 5.0-focal
          command: deb
        5.0-focal-rpm:
          container: 5.0-focal
          command: rpm
        5.0-focal-zip:
          container: 5.0-focal
          command: zip
        5.0-focal-tarball:
          container: 5.0-focal
          command: tarball

        5.0-buster-deb:
          container: 5.0-buster
          command: deb
        5.0-buster-rpm:
          container: 5.0-buster
          command: rpm
        5.0-buster-zip:
          container: 5.0-buster
          command: zip
        5.0-buster-tarball:
          container: 5.0-buster
          command: tarball

        5.0-bullseye-deb:
          container: 5.0-bullseye
          command: deb
        5.0-bullseye-rpm:
          container: 5.0-bullseye
          command: rpm
        5.0-bullseye-zip:
          container: 5.0-bullseye
          command: zip
        5.0-bullseye-tarball:
          container: 5.0-bullseye
          command: tarball

    container: $[ variables['container'] ]
    pool:
      vmImage: ubuntu-20.04
    steps:
    - template: .azure-pipelines-shared.yml

  - job: molecule
    pool:
      vmImage: ubuntu-20.04
    strategy:
      maxParallel: 8
      matrix:
        self-contained:
          suite: self-contained
        framework-dependent-app:
          suite: framework-dependent
    steps:
    - bash: |
        set -e
        export PATH=~/.local/bin/:$PATH

        pip3 install --upgrade pip

        pip3 install wheel
        pip3 install --upgrade --user setuptools
        pip3 install --user ansible==4.8.0
        pip3 install --user molecule==3.5.2
        pip3 install --user molecule-docker==1.1.0
        pip3 install --user docker==5.0.3
        pip3 install --user pytest==6.2.5
        pip3 install --user testinfra==6.0.0
        molecule --version
        ansible --version
        pytest --version
      displayName: Install molecule
    - task: DownloadBuildArtifacts@0
      displayName: Download Build Artifacts
      inputs:
        artifactName: nuget
        downloadPath: $(Build.ArtifactStagingDirectory)
    - bash: |
        set -e
        export PATH="$PATH:/$HOME/.dotnet/tools"

        cd $(suite)-app

        echo "<configuration><packageSources><add key='local' value='$(Build.ArtifactStagingDirectory)/nuget' /></packageSources></configuration>" > NuGet.config
        version=$(cat $(Build.ArtifactStagingDirectory)/nuget/version.txt)

        # Install the dotnet-rpm and dotnet-deb tools
        dotnet tool install --global dotnet-deb --version $version --add-source $(Build.ArtifactStagingDirectory)/nuget
        dotnet tool install --global dotnet-rpm --version $version --add-source $(Build.ArtifactStagingDirectory)/nuget

        # Create .deb and .rpm packages
        dotnet rpm install
        dotnet rpm -o $(Build.SourcesDirectory)/molecule/$(suite)/
        dotnet deb -o $(Build.SourcesDirectory)/molecule/$(suite)/
      workingDirectory: $(Build.SourcesDirectory)/molecule/$(suite)
      displayName: Build $(suite)-app
    - bash: |
        set -e
        export PATH=~/.local/bin/:$PATH

        molecule test
      workingDirectory: $(Build.SourcesDirectory)/molecule/$(suite)
      displayName: Run molecule tests for $(suite)-app
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'pytest.xml'
        searchFolder: '$(Build.SourcesDirectory)/molecule/$(suite)/molecule/default/'
      condition: always()
      displayName: Publish test results

  - job: build_macos
    pool:
      vmImage: 'macOS-10.14'
    variables:
      container: macos
      command: tarball
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core 3.1'
      inputs:
        packageType: sdk
        version: 3.1.415
    - template: .azure-pipelines-shared.yml

  - job: test_macos
    pool:
      vmImage: 'macOS-10.14'
    dependsOn: build_macos
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: Download Build Artifacts
      inputs:
        artifactName: packages
        downloadPath: $(Build.ArtifactStagingDirectory)/
    - task: UseDotNet@2
      displayName: 'Use .NET Core 3.1'
      inputs:
        packageType: sdk
        version: 3.1.415
    - bash: |
        set -e
        tar xvzf $(Build.ArtifactStagingDirectory)/packages/macos/test-tarball.1.0.0.tar.gz
      displayName: Extract tarball
    # .NET Core 3.x adn 5.x don't generate an app host for because the apps won't run on ARM if not notarized.
    # See https://github.com/dotnet/sdk/pull/4019/files and https://github.com/dotnet/sdk/issues/4012.
    # This means there's no 'test-tarball' executable to run.
    - bash: |
        set -e
        dotnet ./test-tarball.dll
      displayName: Execute program

  - job: publish_nuget
    pool:
      vmImage: 'VS2017-Win2016'
    dependsOn:
    - test_macos
    - molecule

    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: 'nuget'
      displayName: 'Download NuGet artifacts'
      
    - task: NuGetToolInstaller@0
      displayName: Install NuGet

    - task: NuGetCommand@2
      inputs:
        command: push
        packagesToPush: '$(System.ArtifactsDirectory)/nuget/*.nupkg'
        publishFeedCredentials: 'NuGet'
        nuGetFeedType: external